---
---

<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width" />
    <title>OSU Course Dependency Visualizer</title>
  </head>
  <body>
    <style is:global>
      .force-graph-container .graph-tooltip {
        width: 60ch;
      }

      body {
        margin: 0;
      }

      #loading {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0 2em;
      }

      #loading > div {
        max-width: 70ch;
        text-align: center;
      }

      .lds-dual-ring {
        display: inline-block;
        width: 80px;
        height: 80px;
      }
      .lds-dual-ring:after {
        content: " ";
        display: block;
        width: 64px;
        height: 64px;
        margin: 8px;
        border-radius: 50%;
        border: 6px solid #bbb;
        border-color: #bbb transparent #bbb transparent;
        animation: lds-dual-ring 1.2s linear infinite;
      }
      @keyframes lds-dual-ring {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>

    <div id="loading">
      <div style="margin-bottom: 1em;" class="lds-dual-ring"></div>
      <div style="margin-bottom: 2em; font-size: small; max-width: 30ch;">
        Your browser may warn you that this page is slowing down the browser.
      </div>
      <div id="tip"></div>
    </div>

    <div id="graph"></div>

    <script>
      // force-graph types are not great (javascript library) so there are a lot of anys :(
      import ForceGraph from "force-graph";
      import type { constructGraph, Link, Course } from "../parser";
      import { hashStr } from "../utils";

      // loader
      const tips = [
        "Tip: add <code>?include=CSE,PHYSICS,MATH,STAT</code> in the URL bar to build a graph out of classes only the CSE, Physics, Math, and Statistics departments.",
        "Tip: add <code>?exclude=MUSIC</code> in the URL bar to build the full graph but without the Music department.",
        "Tip: add <code>?include=MATH,STAT,CHEM&exclude=CHEM</code> in the URL bar to build a graph out of classes only the Math and Statistics departments",
      ];
      const tipElement = document.getElementById("tip")!;
      tipElement.innerHTML = tips[Math.floor(Math.random() * tips.length)];

      // input

      const params = new URLSearchParams(document.location.search);
      const includedSubjectIdsParams = params.get("include");
      const includedSubjectIds = includedSubjectIdsParams
        ? includedSubjectIdsParams
            .split(",")
            .map((subjectId) => subjectId.toUpperCase())
        : [];
      const excludedSubjectIdsParams = params.get("exclude");
      const excludedSubjectIds = excludedSubjectIdsParams
        ? excludedSubjectIdsParams
            .split(",")
            .map((subjectId) => subjectId.toUpperCase())
        : [];

      // parsing

      const courses = await fetch("courses.json")
        .then((res) => res.json())
        .then((courses: Course[]) => courses);

      type Graph = ReturnType<typeof constructGraph>;

      const subjectIds =
        includedSubjectIds.length > 0
          ? includedSubjectIds.filter(
              (subjectId) => !excludedSubjectIds.includes(subjectId)
            )
          : courses
              .map((course) => course.subjectId)
              .filter((subjectId) => !excludedSubjectIds.includes(subjectId));

      const coursesGraph = await fetch("courses-graph.json")
        .then((res) => res.json())
        .then((graph: Graph) => {
          return {
            nodes: graph.nodes
              .filter((node) => subjectIds.includes(node.label.split(" ")[0]))
              .map((node) => {
                return {
                  ...node,
                  __links: node.__links.filter(
                    (link) =>
                      subjectIds.includes(link.source.split(" ")[0]) &&
                      subjectIds.includes(link.target.split(" ")[0])
                  ),
                };
              }),
            links: graph.links.filter(
              (link) =>
                subjectIds.includes(link.source.split(" ")[0]) &&
                subjectIds.includes(link.target.split(" ")[0])
            ),
          };
        });

      // visualizing

      const pallette = [
        "#a6cee3",
        "#1f78b4",
        "#b2df8a",
        "#33a02c",
        "#fb9a99",
        "#e31a1c",
        "#fdbf6f",
        "#ff7f00",
        "#cab2d6",
        "#6a3d9a",
        "#b15928",
      ];

      let highlightLinks: Link[] = [];

      const dashLen = 2;
      const gapLen = 1;

      const renderGraph = (graph: Graph) => {
        document.getElementById("loading")!.remove();
        const graphElement = document.getElementById("graph")!;
        const g = ForceGraph()(graphElement)
          .graphData(graph)
          .nodeId("id")
          .nodeLabel("hover")
          .linkSource("source")
          .linkTarget("target")
          .linkLineDash((link: any) => link.concurrent && [dashLen, gapLen])
          .linkColor((link: any) => {
            return highlightLinks.some(
              (l) =>
                l.source === link.source.id &&
                l.target === link.target.id &&
                l.group === link.group &&
                l.concurrent === link.concurrent
            )
              ? pallette[Math.abs(hashStr(link.group)) % pallette.length]
              : "#77777777";
          })
          .linkDirectionalArrowLength((node: any) => (node.concurrent ? 0 : 3))
          .linkWidth((link: any) =>
            highlightLinks.some(
              (l) =>
                l.source === link.source.id &&
                l.target === link.target.id &&
                l.group === link.group &&
                l.concurrent === link.concurrent
            )
              ? 2
              : 1
          )
          .linkDirectionalParticles(4)
          .linkDirectionalParticleWidth((link: any) =>
            highlightLinks.some(
              (l) =>
                l.source === link.source.id &&
                l.target === link.target.id &&
                l.group === link.group &&
                l.concurrent === link.concurrent
            )
              ? 4
              : 0
          )
          .onNodeHover((node: any) => {
            graphElement.style.cursor = node ? "pointer" : "";
            highlightLinks = node ? node.__links : [];
          })
          .onLinkHover((link: any) => {
            highlightLinks = link
              ? [
                  {
                    source: link.source.id,
                    target: link.target.id,
                    group: link.group,
                    concurrent: link.concurrent,
                  },
                ]
              : [];
          })
          .autoPauseRedraw(false)
          .linkDirectionalArrowRelPos(0.05)
          .nodeCanvasObject((node: any, ctx) => {
            const label = node.label;
            const fontSize = 3;
            ctx.font = `${fontSize}px Sans-Serif`;
            const textWidth = ctx.measureText(label).width;
            const bckgDimensions = [textWidth, fontSize].map(
              (n) => n + fontSize * 0.2
            );

            ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
            ctx.fillRect(
              node.x - bckgDimensions[0] / 2,
              node.y - bckgDimensions[1] / 2,
              bckgDimensions[0],
              bckgDimensions[1]
            );

            const color =
              pallette[Math.abs(hashStr(node.group)) % pallette.length];
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillStyle = color;
            ctx.fillText(label, node.x, node.y);

            node.__bckgDimensions = bckgDimensions;
          })
          .nodePointerAreaPaint((node: any, color, ctx) => {
            ctx.fillStyle = color;
            const bckgDimensions = node.__bckgDimensions;
            bckgDimensions &&
              ctx.fillRect(
                node.x - bckgDimensions[0] / 2,
                node.y - bckgDimensions[1] / 2,
                bckgDimensions[0],
                bckgDimensions[1]
              );
          });
      };

      renderGraph(coursesGraph);
    </script>
  </body>
</html>
