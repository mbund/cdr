---
---

<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width" />
    <title>OSU Course Dependency Visualizer</title>
  </head>
  <body>
    <style is:global>
      .force-graph-container .graph-tooltip {
        width: 60ch;
      }
    </style>

    <div id="graph"></div>

    <script>
      // force-graph types are not great (javascript library) so there are a lot of anys :(
      import ForceGraph from "force-graph";

      const dashLen = 2;
      const gapLen = 1;

      fetch("courses.json")
        .then((res) => res.json())
        .then((data) => {
          const graphElement = document.getElementById("graph");
          if (!graphElement) throw new Error("No graph element found");

          ForceGraph()(graphElement)
            .graphData(data)
            .nodeId("id")
            .nodeLabel("hover")
            .nodeAutoColorBy("group")
            .linkSource("source")
            .linkTarget("target")
            .linkLineDash(
              (link) => (link as any).concurrent && [dashLen, gapLen]
            )
            .linkAutoColorBy("group")
            .linkDirectionalArrowLength((node: any) =>
              node.concurrent ? 0 : 3
            )
            .linkDirectionalParticles(2)
            .onNodeHover((node: any) => {
              graphElement.style.cursor = node ? "pointer" : "";
            })
            .linkDirectionalArrowRelPos(0.05)
            .nodeCanvasObject((node: any, ctx) => {
              const label = node.label;
              const fontSize = 3;
              ctx.font = `${fontSize}px Sans-Serif`;
              const textWidth = ctx.measureText(label).width;
              const bckgDimensions = [textWidth, fontSize].map(
                (n) => n + fontSize * 0.2
              );

              ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
              ctx.fillRect(
                node.x - bckgDimensions[0] / 2,
                node.y - bckgDimensions[1] / 2,
                bckgDimensions[0],
                bckgDimensions[1]
              );

              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              ctx.fillStyle = node.color;
              ctx.fillText(label, node.x, node.y);

              node.__bckgDimensions = bckgDimensions;
            })
            .nodePointerAreaPaint((node: any, color, ctx) => {
              ctx.fillStyle = color;
              const bckgDimensions = node.__bckgDimensions;
              bckgDimensions &&
                ctx.fillRect(
                  node.x - bckgDimensions[0] / 2,
                  node.y - bckgDimensions[1] / 2,
                  bckgDimensions[0],
                  bckgDimensions[1]
                );
            });
        });
    </script>
  </body>
</html>
